esphome:
  name: "well-cistern"
  friendly_name: Well Cistern
  includes:
    - i2c_sonar.h
  libraries:
    - Wire
    - https://github.com/markwal/RCWL_1601_i2c.git
  on_boot:
    priority: 300
    then:
      - switch.template.publish:
          id: display_on
          state: True
      - script.execute: auto_display_off

esp32:
  board: adafruit_feather_esp32_v2
  framework:
    type: arduino

i2c:
  sda: 22
  scl: 20
  id: bus_a

bme680_bsec:
  address: 0x77
  sample_rate: ulp

script:
  - id: auto_display_off
    mode: restart
    then:
      - delay: 5 min
      - switch.template.publish:
          id: display_on
          state: !lambda |-
            id(sh1107).turn_off();
            return false;

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifi_signal_strength

  - platform: bme680_bsec
    temperature:
      name: "BME680 Temperature"
      id: temp
    pressure:
      name: "BME680 Pressure"
      id: pres
    humidity:
      name: "BME680 Humidity"
      id: humid
    iaq:
      name: "BME680 IAQ"
      id: iaq
    co2_equivalent:
      name: "BME680 CO2 Equivalent"
    breath_voc_equivalent:
      name: "BME680 Breath VOC Equivalent"

  - platform: i2csonar
    name: "Depth"

binary_sensor:
  - platform: gpio
    id: button_a
    internal: True
    pin:
      inverted: True
      number: 15
      mode:
        input: True
        pullup: True
    filters:
      - delayed_on_off: 100ms
    on_press:
      - switch.template.publish:
          id: display_on
          state: !lambda |-
            // toggle display_on
            if (id(display_on).state) {
              id(sh1107).turn_off();
              return false;
            }
            id(sh1107).turn_on();
            id(auto_display_off).execute();
            return true;

  - platform: gpio
    id: button_c
    internal: True
    pin:
      inverted: True
      number: 14
      mode:
        input: True
        pullup: True
    filters:
      - delayed_on_off: 100ms
    on_press:
      - script.execute: auto_display_off
      - display.page.show_next: sh1107
      - component.update: sh1107

switch:
  - platform: template
    id: display_on
    internal: True
    restore_mode: ALWAYS_ON
    optimistic: True
    turn_on_action:
      - lambda: |-
          id(sh1107).turn_on();
      - script.execute: auto_display_off
    turn_off_action:
      - lambda: |-
          id(sh1107).turn_off();

text_sensor:
  - platform: wifi_info
    scan_results:
      name: "WiFi Scan"
      id: wifi_scan
    ip_address:
      name: "IP Address"
      id: wifi_ip_address

external_components:
  - source: components

font:
  - file: "gfonts://Source Sans Pro"
    id: roboto
    size: 13
  - file: "gfonts://Source Sans Pro"
    id: source_sans
    size: 16

time:
  - platform: homeassistant
    id: ha_time

display:
  - platform: ssd1306_i2c
    model: 'SH1107_128x64'
    id: sh1107
    rotation: 90
    flip_x: False
    flip_y: False
    offset_y: 96
    external_vcc: True
    update_interval: 10.0s
    pages:
      - id: wifi_page
        lambda: |-
          int line_height = 13;
          int y = 0;
          float signal = id(wifi_signal_strength).state;
          if (signal == signal) { // check for !NaN
            it.printf(0, y, id(roboto), "%s", id(wifi_ip_address).state.c_str());
            it.printf(0, y += line_height, id(roboto), "Connected: %.0f dBm", signal);
          }
          const char *pch = id(wifi_scan).state.c_str();
          ESP_LOGD("wifi_page", "wifi_scan: %s", pch);
          while ((y += line_height) <= 64 - line_height / 2) {
            const char *pchNext = strchr(pch, '\n');
            uint len = pchNext == NULL ? strlen(pch) : pchNext - pch;
            if (pchNext != NULL)
              ++pchNext;
            it.printf(0, y, id(roboto), "%.*s", len, pch);
            if ((pch = pchNext) == NULL || !*pch)
              break;
          }
      - id: depth_page
        lambda: |-
          float gal = id(depth).state;
          if (gal == gal)
            it.printf(0, 0, id(source_sans), "%.1f Gal", gal);

      - id: env_page
        lambda: |-
          auto now = id(ha_time).now();
          it.strftime(0, 0, id(roboto), "%a, %b %d, %Y", now);
          it.strftime(0, 13, id(roboto), "%I:%M %p", now);
          it.printf(0, 26, id(roboto), "%.1f Â°F", id(temp).state * (9.0 / 5.0) + 32.0);
          it.printf(64, 26, id(roboto), "%.1f \%RH", id(humid).state);
          it.printf(0, 39, id(roboto), "%.1f inHg", id(pres).state / 33.8639);
          it.printf(64, 39, id(roboto), "%.1f IAQ", id(iaq).state);

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret well_cistern

ota:
  - platform: esphome
    password: !secret well_cistern_ota

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Well-Cistern"
    password: !secret wifi_ap_password

captive_portal:
